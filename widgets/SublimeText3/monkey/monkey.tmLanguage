<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Monkey language</string>
	<key>fileTypes</key>
	<array>
		<string>monkey</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)/\*\*(?!\*)|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~M</string>
	<key>name</key>
	<string>Monkey</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.my</string>
				</dict>
			</dict>
			<key>match</key>
			<string>/\*\*/</string>
			<key>name</key>
			<string>comment.block.empty.my</string>
		</dict>
		<dict>
			<key>include</key>
			<string>text.html.javadoc</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^\s*
					(class)\s+
					(\w+)\s* # identifier
					(?:\(\s*([^\)]+)\s*\)|)\s* # Template type
					(?:
					  \s*(:)\s*
					  (\w+)
					  (?:\s*,\s*(\w+))?
					  (?:\s*,\s*(\w+))?
					  (?:\s*,\s*(\w+))?
					  (?:\s*,\s*(\w+))?
					  (?:\s*,\s*(\w+))?
					  (?:\s*,\s*(\w+))?
					)? # super class
					</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.my</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.structure.my</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.my</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.type.template.my</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.my</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.my</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?={)</string>
			<key>name</key>
			<string>meta.definition.class.my</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(_|:)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?={)</string>
					<key>name</key>
					<string>meta.definition.class.extends.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^\s*
					(struct)\s+
					(\w+)\s* # identifier
					(?:\(\s*([^\)]+)\s*\)|)\s* # Template type
					</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.my</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.structure.my</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.struct.my</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.type.template.my</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?={)</string>
			<key>name</key>
			<string>meta.definition.struct.my</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(_|:)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?={)</string>
					<key>name</key>
					<string>meta.definition.class.extends.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^\s*
					(\b(this))\s* # identifier
					(?!.*;)  # abort if line has a ;
					(?=\()</string>
			<key>captures</key>
			<dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.constructor.my</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?={)</string>
			<key>name</key>
			<string>meta.definition.constructor.my</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
    				(?:  ^                                 # begin-of-line
    				  |  (?: (?&lt;!else|new|=) )             #  or word + space before name
    				)
    				(~this) # actual name
    				 \s*(\()                           # start bracket or end-of-line
    			</string>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.destructor.my</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.my</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.definition.destructor.my</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^\s*
					(\w+)\s* # identifier
					(?!.*;)  # abort if line has a ;
					(?=\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.structure.my</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.my</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?={)</string>
			<key>name</key>
			<string>meta.definition.method.my</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([A-Z][A-Z0-9_]+)\b</string>
			<key>name</key>
			<string>constant.other.my</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#all-types</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\|&gt;</string>
			<key>name</key>
			<string>constant.language.pipe.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(enum|struct)\b</string>
			<key>name</key>
			<string>storage.type.structure.my</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\b(try|catch|finally|throw)\b</string>
			<key>name</key>
			<string>keyword.control.exception.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(spawn|defer|using)\b</string>
			<key>name</key>
			<string>keyword.control.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(if|else|elseif|elsif|elif|unless|case)\b</string>
			<key>name</key>
			<string>keyword.control.conditional.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(class|new|property|get|set|default|this|parent|static|public|private|protected|interface)\b</string>
			<key>name</key>
			<string>keyword.control.class.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|continue)\b</string>
			<key>name</key>
			<string>keyword.control.branch.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(while|for|do|where|in)\b</string>
			<key>name</key>
			<string>keyword.control.repeat.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(return|fn|let)\b</string>
			<key>name</key>
			<string>keyword.control.statement.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(include)\b</string>
			<key>name</key>
			<string>keyword.control.include.my</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.module.my</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.package.my</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(include)\s+([^ ;]+?);</string>
			<key>name</key>
			<string>meta.include.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(true|false)\b</string>
			<key>name</key>
			<string>constant.language.boolean.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(nil)\b</string>
			<key>name</key>
			<string>constant.language.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0x[0-9a-fA-F]*)|(0b[0-1]*)|(0c[0-7]*)|(([0-9_]+\.?[0-9_]*)|(\.[0-9_]+))((e|E)(\+|-)?[0-9_]+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.my</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string_escaped_char</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(==|!=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;)</string>
			<key>name</key>
			<string>keyword.operator.comparison.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\-\-|\+\+)</string>
			<key>name</key>
			<string>keyword.operator.increment-decrement.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\-|\+|\*|\/|~|%)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(!|&amp;&amp;|\|\|)</string>
			<key>name</key>
			<string>keyword.operator.logical.my</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(opNeg|opCom|opPostInc|opPostDec|opCast|opAdd|opSub|opSub_r|opMul|opDiv|opDiv_r|opMod|opMod_r|opAnd|opOr|opXor|opShl|opShl_r|opShr|opShr_r|opUShr|opUShr_r|opCat|opCat_r|opEquals|opEquals|opCmp|opCmp|opCmp|opCmp|opAddAssign|opSubAssign|opMulAssign|opDivAssign|opModAssign|opAndAssign|opOrAssign|opXorAssign|opShlAssign|opShrAssign|opUShrAssign|opCatAssign|opIndex|opIndexAssign|opCall|opSlice|opSliceAssign|opPos|opAdd_r|opMul_r|opAnd_r|opOr_r|opXor_r)\b</string>
			<key>name</key>
			<string>keyword.operator.overload.my</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#support-type-built-ins-d</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>qw\(</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.block.nested.my</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>qw\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>comment.block.nested.my</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>qw&lt;</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>name</key>
					<string>comment.block.nested.my</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\+</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\+/</string>
					<key>name</key>
					<string>comment.block.nested.my</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.my</string>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.cs</string>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.cs</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.cs</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.my</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.sharp.my</string>
				</dict>
			</array>
		</dict>
		<key>regular_expressions</key>
		<dict>
			<key>comment</key>
			<string>Change disabled to 1 to turn off syntax highlighting in “r Estrings.</string>
			<key>disabled</key>
			<integer>1</integer>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.regexp.python</string>
				</dict>
			</array>
		</dict>
		<key>statement-remainder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.definition.param-list.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|&amp;\w+;)</string>
					<key>name</key>
					<string>constant.character.escape.my</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.my</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.my</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.my</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>((?&lt;=`)(`)|`)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.my</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.empty-string.double.my</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.raw.backtick.my</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.my</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.my</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.my</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support-type-built-ins-classes-d</key>
		<dict>
			<key>match</key>
			<string>\b(abs|range|addm|chr|newFile|int|float|str|array|len|methods|ord|print|printf|println|type|chan|assert|reverse|dialTCP|listenTCP|dialUDP|dialUnix|listenUnix|dbOpen|newTime|newDate|newCond|newOnce|newMutex|newRWMutex|newWaitGroup|newPipe|newLogger|newList|deepEqual|newCsvReader|newCsvWriter|instanceOf|is_a|classOf)\b</string>
			<key>name</key>
			<string>support.type.built-ins.functions.my</string>
		</dict>
		<key>support-type-built-ins-d</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#support-type-built-ins-exceptions-d</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-type-built-ins-classes-d</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-type-built-ins-interfaces-d</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-type-built-ins-structs-d</string>
				</dict>
			</array>
		</dict>
		<key>support-type-built-ins-exceptions-d</key>
		<dict>
			<key>match</key>
			<string>\b(__todo__)\b</string>
			<key>name</key>
			<string>support.type.built-ins.exceptions.my</string>
		</dict>
		<key>support-type-built-ins-interfaces-d</key>
		<dict>
			<key>match</key>
			<string>\b(__todo__)\b</string>
			<key>name</key>
			<string>support.type.built-ins.interfaces.my</string>
		</dict>
		<key>support-type-built-ins-structs-d</key>
		<dict>
			<key>match</key>
			<string>\b(__todo__)\b</string>
			<key>name</key>
			<string>support.type.built-ins.structs.my</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.my</string>
	<key>uuid</key>
	<string>B64C47C0-FDE6-434B-A547-B6D05DC2CC90</string>
</dict>
</plist>
